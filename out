[1] [compile_ml_files] entering (foo/A.ml)
[local_store:fresh] Created new store with 33 slots
[local_store:with_store] Restored 33 slots for store 'foo/A.ml'
[Find_normalized_with_visibility] attempt to auto-include C.cmi
[auto_include] Clflags.no_std_include is false, continue
[auto_include] (entering with fn=c.cmi)
[auto_include] failed, aborting (fn=c.cmi)
[1] [compile_ml_files] foo/A.ml depends on C.cmi but it is not found!
[1] [compile_ml_files] C.cmi resolved to foo/C.cmi
[1] [compile_ml_files] compiling foo/C.cmi...
[1] [compile_ml_files] entering (foo/B.ml)
[local_store:fresh] Created new store with 33 slots
[1] [compile_ml_files] entering (foo/C.ml)
[local_store:fresh] Created new store with 33 slots
[1] [compile_dependency] entering (file=foo/C.mli)
>> [ProcessInterface] foo/C.mli
>> [Load_path:Find_normalized_with_visibility] Stdlib.cmi
[1] [Sys.command] boot/ocamlrun boot/ocamlc -c foo/C.mli -nostdlib -use-prims runtime/primitives -g -strict-sequence -principal -absname -w +a-4-9-40-41-42-44-45-48 -warn-error +a -bin-annot -strict-formats -I foo -I stdlib -I .
[add_new_file_to_path] adding dirname=foo base=C.cmi to global state
[Find_normalized_with_visibility] attempt to auto-include B.cmi
[auto_include] Clflags.no_std_include is false, continue
[auto_include] (entering with fn=b.cmi)
[auto_include] failed, aborting (fn=b.cmi)
[1] [compile_ml_files] foo/A.ml depends on B.cmi but it is not found!
[1] [compile_ml_files] B.cmi resolved to foo/B.cmi
[1] [compile_ml_files] compiling foo/B.cmi...
[1] [compile_dependency] entering (file=foo/B.mli)
>> [ProcessInterface] foo/B.mli
>> [Load_path:Find_normalized_with_visibility] Stdlib.cmi
[1] [Sys.command] boot/ocamlrun boot/ocamlc -c foo/B.mli -nostdlib -use-prims runtime/primitives -g -strict-sequence -principal -absname -w +a-4-9-40-41-42-44-45-48 -warn-error +a -bin-annot -strict-formats -I foo -I stdlib -I .
[add_new_file_to_path] adding dirname=foo base=B.cmi to global state
[Find_normalized_with_visibility] attempt to auto-include A.cmi
[auto_include] Clflags.no_std_include is false, continue
[auto_include] (entering with fn=a.cmi)
[auto_include] failed, aborting (fn=a.cmi)
[1] [compile_ml_files] foo/A.ml depends on A.cmi but it is not found!
[1] [compile_ml_files] A.cmi resolved to foo/A.cmi
[1] [compile_ml_files] compiling foo/A.cmi...
[1] [compile_dependency] entering (file=foo/A.mli)
>> [ProcessInterface] foo/A.mli
>> [Load_path:Find_normalized_with_visibility] Stdlib.cmi
[1] [Sys.command] boot/ocamlrun boot/ocamlc -c foo/A.mli -nostdlib -use-prims runtime/primitives -g -strict-sequence -principal -absname -w +a-4-9-40-41-42-44-45-48 -warn-error +a -bin-annot -strict-formats -I foo -I stdlib -I .
[add_new_file_to_path] adding dirname=foo base=A.cmi to global state
[1] [compile_implementation] finished compiling foo/A.ml!
Fatal error: exception File "utils/local_store.ml", line 69, characters 2-8: Assertion failed
Called from unknown location
